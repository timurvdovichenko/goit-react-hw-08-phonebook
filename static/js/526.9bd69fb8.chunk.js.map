{"version":3,"file":"static/js/526.9bd69fb8.chunk.js","mappings":"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","sources":["components/Common.styled.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.jsx","components/Filter.jsx","components/ContactList/ContactList.styled.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: block;\n  margin: 30px;\n  padding: 15px;\n  width: 300px;\n  border: 2px solid black;\n  ${props => props.filterForm}\n`;\nexport const LabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\nexport const InputStyled = styled.input`\n  margin-bottom: 25px;\n  width: 150px;\n  ${props => props.inputFilter}\n`;\nexport const ButtonStyled = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 1px solid black;\n  color: black;\n  padding: 0.25em 1em;\n  text-transform: capitalize;\n  ${props => props.buttonListStyle};\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n    0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  &:hover {\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    scale: 1.01;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin: 30px;\n  padding: 15px;\n  margin-top: 0;\n  ${'' /* width: 300px; */}\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-transform: capitalize;\n  padding: 3px;\n`;\n\nexport const Span = styled.span`\n  margin-bottom: 10px;\n`;\n","import { useState } from 'react';\nimport { FormStyled, LabelStyled, InputStyled, ButtonStyled } from '../Common.styled';\nimport { Span } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsoperations';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { Notify } from 'notiflix';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contactsRedux = useSelector(getContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    if (name === 'number') {\n      setNumber(value);\n      return;\n    }\n    if (name === 'name') {\n      setName(value);\n      return;\n    }\n    throw new Error(`There is no field name - ${name}`);\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    const contact = { name: name, number: number };\n\n    const isExist = contactsRedux.find(\n      contactFind => contactFind.name.toLowerCase() === contact.name.toLowerCase(),\n    );\n\n    if (isExist) {\n      // alert(`${contact.name} is already in contacts.`);\n      Notify.failure(`${contact.name} is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(contact));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormStyled onSubmit={handleSubmitForm}>\n      <LabelStyled>\n        <Span>Name</Span>\n        <InputStyled\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </LabelStyled>\n      <LabelStyled>\n        <Span>Phone</Span>\n        <InputStyled\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </LabelStyled>\n      <ButtonStyled type=\"submit\">Add contact</ButtonStyled>\n    </FormStyled>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\nexport const H2Styled = styled.h2`\n  display: block;\n  margin: 30px;\n  font-size: 24px;\n`;\n","import { LabelStyled, InputStyled, FormStyled } from './Common.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const valueRedux = useSelector(state => state.filter.value);\n  const dispatch = useDispatch();\n  return (\n    <FormStyled filterForm={'border-style: none; margin-bottom: 0;'}>\n      <LabelStyled>\n        Find contacts by name\n        <InputStyled\n          type=\"text\"\n          title=\"filter\"\n          value={valueRedux}\n          onChange={e => {\n            dispatch(updateFilter(e.currentTarget.value));\n          }}\n          inputFilter={'margin: 0; margin-top: 10px;'}\n        />\n      </LabelStyled>\n    </FormStyled>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin: 30px;\n  padding: 15px;\n  margin-top: 0;\n  width: 400px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  text-transform: capitalize;\n  padding: 3px;\n`;\n","// export const getContacts = state => state.contacts.items;\n\nexport const getFilterValue = state => state.filter.value;\n","import { ButtonStyled } from '../Common.styled';\nimport { List, ListItem } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { getFilterValue } from 'redux/selectors';\nimport { deleteContact, fetchContacts } from 'redux/contacts/contactsoperations';\n\nconst ContactList = () => {\n  const contactsRedux = useSelector(getContacts);\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    if (!contactsRedux) {\n      return;\n    }\n    return contactsRedux.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue.toLowerCase()),\n    );\n  };\n\n  return (\n    <List>\n      {getFilteredContacts().map(({ name, id, number }) => {\n        return (\n          <ListItem key={id}>\n            {name}: {number}\n            <ButtonStyled\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n              buttonListStyle={'margin-left: 10px'}\n            >\n              Delete\n            </ButtonStyled>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport { H2Styled } from './Contacts.styled';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst Contacts = () => {\n  return (\n    <div>\n      <H2Styled>PhoneBook</H2Styled>\n      <ContactForm />\n      <H2Styled>Contacts</H2Styled>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormStyled","styled","props","filterForm","LabelStyled","InputStyled","inputFilter","ButtonStyled","buttonListStyle","Span","useState","name","setName","number","setNumber","dispatch","useDispatch","contactsRedux","useSelector","getContacts","handleChange","e","currentTarget","value","Error","resetForm","onSubmit","preventDefault","contact","find","contactFind","toLowerCase","Notify","addContact","type","pattern","title","required","onChange","H2Styled","valueRedux","state","filter","updateFilter","List","ListItem","getFilterValue","filterValue","useEffect","fetchContacts","includes","getFilteredContacts","map","id","onClick","deleteContact"],"sourceRoot":""}